params {
  outdir = './results'
  assembly_exts = ['*.fa', '*.fasta', '*.fna']
  assembly_search_path = makeAssemblySearchPath( assembly_exts )
  pre_assembled = false
  illumina_suffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
  fastq_exts = ['.fastq.gz', '.fq.gz', '.fastq', '.fq']
  fastq_search_path = makeFastqSearchPath( illumina_suffixes, fastq_exts )
  platon_db = '/data/ref_databases/platon/db'
  mob_filter_db = '/data/ref_databases/mob-suite/chromosomes/2019-11-NCBI-Enterobacteriacea-Chromosomes/2019-11-NCBI-Enterobacteriacea-Chromosomes.fasta'
  blast_percent_identity = 98
  blast_min_length = 100
  mashthreshold = 0.996
  min_plasmid_coverage_depth = 10
  min_plasmid_coverage_breadth = 95
}

def makeAssemblySearchPath ( assembly_exts ) {
    def assembly_search_path = []
    for (ext in assembly_exts) {
        assembly_search_path.add(params.assembly_input.toString() + '/' + ext.toString())
        assembly_search_path.add(params.assembly_input.toString() + '/*/' + ext.toString())
    }
    return assembly_search_path
}

def makeFastqSearchPath ( illumina_suffixes, fastq_exts ) {
    def fastq_search_path = []
    for (suffix in illumina_suffixes){
        for (ext in fastq_exts) {
            fastq_search_path.add(params.fastq_input.toString() + '/' + suffix.toString() + ext.toString())
        }
    }
    return fastq_search_path
}

profiles {
  conda {
    process.conda = "$baseDir/environments/environment.yml"
    if (params.cache){
     conda.cacheDir = params.cache
    }
  }
}


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

process {
  withName: unicycler {
    cpus = 16
  }
  withName: quast {
    cpus = 4
  }
  withName: mash_screen {
    cpus = 4
  }
  withName: mob_recon {
    cpus = 4
  }
  withName: align_reads_to_reference_plasmid {
    cpus = 4
  }
  withName: call_snps {
    conda = "$baseDir/environments/freebayes.yml"
  }
}

manifest {
  author = 'Dan Fornika'
  name = 'BCCDC-PHL/plasmid-screen'
  description = 'Plasmid Screen'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
  version = '0.1.0'
}

